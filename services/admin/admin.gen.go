// Package admin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package admin

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Code    *string                 `json:"code,omitempty"`
	Details *map[string]interface{} `json:"details,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// Reward defines model for Reward.
type Reward struct {
	Active      *bool                   `json:"active,omitempty"`
	Cost        *int                    `json:"cost,omitempty"`
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	CreatedBy   *openapi_types.UUID     `json:"created_by"`
	Description *string                 `json:"description,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Segment     *map[string]interface{} `json:"segment"`
}

// Rule defines model for Rule.
type Rule struct {
	Active      *bool                   `json:"active,omitempty"`
	Config      *map[string]interface{} `json:"config,omitempty"`
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	UpdatedAt   *time.Time              `json:"updated_at,omitempty"`
}

// Segment defines model for Segment.
type Segment struct {
	Active      *bool                   `json:"active,omitempty"`
	CreatedAt   *time.Time              `json:"created_at,omitempty"`
	Criteria    *map[string]interface{} `json:"criteria,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Id          *openapi_types.UUID     `json:"id,omitempty"`
	Name        *string                 `json:"name,omitempty"`
}

// GetRewardsParams defines parameters for GetRewards.
type GetRewardsParams struct {
	Active  *bool   `form:"active,omitempty" json:"active,omitempty"`
	Segment *string `form:"segment,omitempty" json:"segment,omitempty"`
}

// PostRewardsJSONBody defines parameters for PostRewards.
type PostRewardsJSONBody struct {
	Active      *bool                   `json:"active,omitempty"`
	Cost        int                     `json:"cost"`
	Description *string                 `json:"description,omitempty"`
	Name        string                  `json:"name"`
	Segment     *map[string]interface{} `json:"segment,omitempty"`
}

// PutRewardsRewardIdJSONBody defines parameters for PutRewardsRewardId.
type PutRewardsRewardIdJSONBody struct {
	Active      *bool                   `json:"active,omitempty"`
	Cost        *int                    `json:"cost,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Name        *string                 `json:"name,omitempty"`
	Segment     *map[string]interface{} `json:"segment,omitempty"`
}

// PostRulesJSONBody defines parameters for PostRules.
type PostRulesJSONBody struct {
	Active      *bool                  `json:"active,omitempty"`
	Config      map[string]interface{} `json:"config"`
	Description *string                `json:"description,omitempty"`
	Name        string                 `json:"name"`
}

// PutRulesRuleIdJSONBody defines parameters for PutRulesRuleId.
type PutRulesRuleIdJSONBody struct {
	Active      *bool                   `json:"active,omitempty"`
	Config      *map[string]interface{} `json:"config,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Name        *string                 `json:"name,omitempty"`
}

// PostSegmentsJSONBody defines parameters for PostSegments.
type PostSegmentsJSONBody struct {
	Active      *bool                  `json:"active,omitempty"`
	Criteria    map[string]interface{} `json:"criteria"`
	Description *string                `json:"description,omitempty"`
	Name        string                 `json:"name"`
}

// PutSegmentsSegmentIdJSONBody defines parameters for PutSegmentsSegmentId.
type PutSegmentsSegmentIdJSONBody struct {
	Active      *bool                   `json:"active,omitempty"`
	Criteria    *map[string]interface{} `json:"criteria,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Name        *string                 `json:"name,omitempty"`
}

// PostRewardsJSONRequestBody defines body for PostRewards for application/json ContentType.
type PostRewardsJSONRequestBody PostRewardsJSONBody

// PutRewardsRewardIdJSONRequestBody defines body for PutRewardsRewardId for application/json ContentType.
type PutRewardsRewardIdJSONRequestBody PutRewardsRewardIdJSONBody

// PostRulesJSONRequestBody defines body for PostRules for application/json ContentType.
type PostRulesJSONRequestBody PostRulesJSONBody

// PutRulesRuleIdJSONRequestBody defines body for PutRulesRuleId for application/json ContentType.
type PutRulesRuleIdJSONRequestBody PutRulesRuleIdJSONBody

// PostSegmentsJSONRequestBody defines body for PostSegments for application/json ContentType.
type PostSegmentsJSONRequestBody PostSegmentsJSONBody

// PutSegmentsSegmentIdJSONRequestBody defines body for PutSegmentsSegmentId for application/json ContentType.
type PutSegmentsSegmentIdJSONRequestBody PutSegmentsSegmentIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// List all rewards
	// (GET /rewards)
	GetRewards(ctx echo.Context, params GetRewardsParams) error
	// Create a new reward
	// (POST /rewards)
	PostRewards(ctx echo.Context) error
	// Get a specific reward
	// (GET /rewards/{rewardId})
	GetRewardsRewardId(ctx echo.Context, rewardId openapi_types.UUID) error
	// Update a reward
	// (PUT /rewards/{rewardId})
	PutRewardsRewardId(ctx echo.Context, rewardId openapi_types.UUID) error
	// List all rules
	// (GET /rules)
	GetRules(ctx echo.Context) error
	// Create a new rule
	// (POST /rules)
	PostRules(ctx echo.Context) error
	// Delete a rule
	// (DELETE /rules/{ruleId})
	DeleteRulesRuleId(ctx echo.Context, ruleId openapi_types.UUID) error
	// Get a specific rule
	// (GET /rules/{ruleId})
	GetRulesRuleId(ctx echo.Context, ruleId openapi_types.UUID) error
	// Update a rule
	// (PUT /rules/{ruleId})
	PutRulesRuleId(ctx echo.Context, ruleId openapi_types.UUID) error
	// List all segments
	// (GET /segments)
	GetSegments(ctx echo.Context) error
	// Create a new segment
	// (POST /segments)
	PostSegments(ctx echo.Context) error
	// Get a specific segment
	// (GET /segments/{segmentId})
	GetSegmentsSegmentId(ctx echo.Context, segmentId openapi_types.UUID) error
	// Update a segment
	// (PUT /segments/{segmentId})
	PutSegmentsSegmentId(ctx echo.Context, segmentId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetRewards converts echo context to params.
func (w *ServerInterfaceWrapper) GetRewards(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRewardsParams
	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "segment" -------------

	err = runtime.BindQueryParameter("form", true, false, "segment", ctx.QueryParams(), &params.Segment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segment: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRewards(ctx, params)
	return err
}

// PostRewards converts echo context to params.
func (w *ServerInterfaceWrapper) PostRewards(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRewards(ctx)
	return err
}

// GetRewardsRewardId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRewardsRewardId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "rewardId" -------------
	var rewardId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "rewardId", ctx.Param("rewardId"), &rewardId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rewardId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRewardsRewardId(ctx, rewardId)
	return err
}

// PutRewardsRewardId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRewardsRewardId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "rewardId" -------------
	var rewardId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "rewardId", ctx.Param("rewardId"), &rewardId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rewardId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRewardsRewardId(ctx, rewardId)
	return err
}

// GetRules converts echo context to params.
func (w *ServerInterfaceWrapper) GetRules(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRules(ctx)
	return err
}

// PostRules converts echo context to params.
func (w *ServerInterfaceWrapper) PostRules(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRules(ctx)
	return err
}

// DeleteRulesRuleId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRulesRuleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ruleId" -------------
	var ruleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", ctx.Param("ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ruleId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRulesRuleId(ctx, ruleId)
	return err
}

// GetRulesRuleId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRulesRuleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ruleId" -------------
	var ruleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", ctx.Param("ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ruleId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRulesRuleId(ctx, ruleId)
	return err
}

// PutRulesRuleId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRulesRuleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ruleId" -------------
	var ruleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "ruleId", ctx.Param("ruleId"), &ruleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ruleId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRulesRuleId(ctx, ruleId)
	return err
}

// GetSegments converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegments(ctx)
	return err
}

// PostSegments converts echo context to params.
func (w *ServerInterfaceWrapper) PostSegments(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSegments(ctx)
	return err
}

// GetSegmentsSegmentId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSegmentsSegmentId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentId" -------------
	var segmentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "segmentId", ctx.Param("segmentId"), &segmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSegmentsSegmentId(ctx, segmentId)
	return err
}

// PutSegmentsSegmentId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSegmentsSegmentId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "segmentId" -------------
	var segmentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "segmentId", ctx.Param("segmentId"), &segmentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter segmentId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSegmentsSegmentId(ctx, segmentId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/rewards", wrapper.GetRewards)
	router.POST(baseURL+"/rewards", wrapper.PostRewards)
	router.GET(baseURL+"/rewards/:rewardId", wrapper.GetRewardsRewardId)
	router.PUT(baseURL+"/rewards/:rewardId", wrapper.PutRewardsRewardId)
	router.GET(baseURL+"/rules", wrapper.GetRules)
	router.POST(baseURL+"/rules", wrapper.PostRules)
	router.DELETE(baseURL+"/rules/:ruleId", wrapper.DeleteRulesRuleId)
	router.GET(baseURL+"/rules/:ruleId", wrapper.GetRulesRuleId)
	router.PUT(baseURL+"/rules/:ruleId", wrapper.PutRulesRuleId)
	router.GET(baseURL+"/segments", wrapper.GetSegments)
	router.POST(baseURL+"/segments", wrapper.PostSegments)
	router.GET(baseURL+"/segments/:segmentId", wrapper.GetSegmentsSegmentId)
	router.PUT(baseURL+"/segments/:segmentId", wrapper.PutSegmentsSegmentId)

}
